{"remainingRequest":"E:\\Ravikanth\\spured_new\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!E:\\Ravikanth\\spured_new\\node_modules\\mydatepicker\\dist\\my-date-picker.component.js","dependencies":[{"path":"E:\\Ravikanth\\spured_new\\node_modules\\mydatepicker\\dist\\my-date-picker.component.js","mtime":1537599893000},{"path":"E:\\Ravikanth\\spured_new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1571556314130},{"path":"E:\\Ravikanth\\spured_new\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ElementRef, ViewEncapsulation, ChangeDetectorRef, Renderer, ViewChild, forwardRef } from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { LocaleService } from \"./services/my-date-picker.locale.service\";\nimport { UtilService } from \"./services/my-date-picker.util.service\";\nexport var MYDP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MyDatePicker; }),\n    multi: true\n};\nvar CalToggle = /*@__PURE__*/ (function (CalToggle) {\n    CalToggle[CalToggle[\"Open\"] = 1] = \"Open\";\n    CalToggle[CalToggle[\"CloseByDateSel\"] = 2] = \"CloseByDateSel\";\n    CalToggle[CalToggle[\"CloseByCalBtn\"] = 3] = \"CloseByCalBtn\";\n    CalToggle[CalToggle[\"CloseByOutClick\"] = 4] = \"CloseByOutClick\";\n    CalToggle[CalToggle[\"CloseByEsc\"] = 5] = \"CloseByEsc\";\n    CalToggle[CalToggle[\"CloseByApi\"] = 6] = \"CloseByApi\";\n    return CalToggle;\n})({});\nvar Year = /*@__PURE__*/ (function (Year) {\n    Year[Year[\"min\"] = 1000] = \"min\";\n    Year[Year[\"max\"] = 9999] = \"max\";\n    return Year;\n})({});\nvar InputFocusBlur = /*@__PURE__*/ (function (InputFocusBlur) {\n    InputFocusBlur[InputFocusBlur[\"focus\"] = 1] = \"focus\";\n    InputFocusBlur[InputFocusBlur[\"blur\"] = 2] = \"blur\";\n    return InputFocusBlur;\n})({});\nvar KeyCode = /*@__PURE__*/ (function (KeyCode) {\n    KeyCode[KeyCode[\"enter\"] = 13] = \"enter\";\n    KeyCode[KeyCode[\"esc\"] = 27] = \"esc\";\n    KeyCode[KeyCode[\"space\"] = 32] = \"space\";\n    return KeyCode;\n})({});\nvar MonthId = /*@__PURE__*/ (function (MonthId) {\n    MonthId[MonthId[\"prev\"] = 1] = \"prev\";\n    MonthId[MonthId[\"curr\"] = 2] = \"curr\";\n    MonthId[MonthId[\"next\"] = 3] = \"next\";\n    return MonthId;\n})({});\nvar MMM = \"mmm\";\nexport var MyDatePicker = /*@__PURE__*/ (function () {\n    function MyDatePicker(elem, renderer, cdr, localeService, utilService) {\n        this.elem = elem;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.localeService = localeService;\n        this.utilService = utilService;\n        this.dateChanged = new EventEmitter();\n        this.inputFieldChanged = new EventEmitter();\n        this.calendarViewChanged = new EventEmitter();\n        this.calendarToggle = new EventEmitter();\n        this.inputFocusBlur = new EventEmitter();\n        this.onChangeCb = function () { };\n        this.onTouchedCb = function () { };\n        this.showSelector = false;\n        this.visibleMonth = { monthTxt: \"\", monthNbr: 0, year: 0 };\n        this.selectedMonth = { monthTxt: \"\", monthNbr: 0, year: 0 };\n        this.selectedDate = { year: 0, month: 0, day: 0 };\n        this.weekDays = [];\n        this.dates = [];\n        this.months = [];\n        this.years = [];\n        this.selectionDayTxt = \"\";\n        this.invalidDate = false;\n        this.disableTodayBtn = false;\n        this.dayIdx = 0;\n        this.selectMonth = false;\n        this.selectYear = false;\n        this.prevMonthDisabled = false;\n        this.nextMonthDisabled = false;\n        this.prevYearDisabled = false;\n        this.nextYearDisabled = false;\n        this.prevYearsDisabled = false;\n        this.nextYearsDisabled = false;\n        this.prevMonthId = MonthId.prev;\n        this.currMonthId = MonthId.curr;\n        this.nextMonthId = MonthId.next;\n        this.opts = {\n            dayLabels: {},\n            monthLabels: {},\n            dateFormat: \"\",\n            showTodayBtn: true,\n            todayBtnTxt: \"\",\n            firstDayOfWeek: \"\",\n            satHighlight: false,\n            sunHighlight: true,\n            highlightDates: [],\n            markCurrentDay: true,\n            markCurrentMonth: true,\n            markCurrentYear: true,\n            disableUntil: { year: 0, month: 0, day: 0 },\n            disableSince: { year: 0, month: 0, day: 0 },\n            disableDays: [],\n            enableDays: [],\n            markDates: [],\n            markWeekends: {},\n            disableDateRanges: [],\n            disableWeekends: false,\n            disableWeekdays: [],\n            showWeekNumbers: false,\n            height: \"34px\",\n            width: \"100%\",\n            selectionTxtFontSize: \"14px\",\n            selectorHeight: \"232px\",\n            selectorWidth: \"252px\",\n            allowDeselectDate: false,\n            inline: false,\n            showClearDateBtn: true,\n            showDecreaseDateBtn: false,\n            showIncreaseDateBtn: false,\n            alignSelectorRight: false,\n            openSelectorTopOfInput: false,\n            indicateInvalidDate: true,\n            editableDateField: true,\n            monthSelector: true,\n            yearSelector: true,\n            disableHeaderButtons: true,\n            minYear: Year.min,\n            maxYear: Year.max,\n            componentDisabled: false,\n            showSelectorArrow: true,\n            showInputField: true,\n            openSelectorOnInputClick: false,\n            allowSelectionOnlyInCurrentMonth: true,\n            ariaLabelInputField: \"Date input field\",\n            ariaLabelClearDate: \"Clear Date\",\n            ariaLabelDecreaseDate: \"Decrease Date\",\n            ariaLabelIncreaseDate: \"Increase Date\",\n            ariaLabelOpenCalendar: \"Open Calendar\",\n            ariaLabelPrevMonth: \"Previous Month\",\n            ariaLabelNextMonth: \"Next Month\",\n            ariaLabelPrevYear: \"Previous Year\",\n            ariaLabelNextYear: \"Next Year\"\n        };\n        this.setLocaleOptions();\n    }\n    MyDatePicker.prototype.setLocaleOptions = function () {\n        var _this = this;\n        var opts = this.localeService.getLocaleOptions(this.locale);\n        Object.keys(opts).forEach(function (k) {\n            _this.opts[k] = opts[k];\n        });\n    };\n    MyDatePicker.prototype.setOptions = function () {\n        var _this = this;\n        if (this.options !== undefined) {\n            Object.keys(this.options).forEach(function (k) {\n                _this.opts[k] = _this.options[k];\n            });\n        }\n        if (this.opts.minYear < Year.min) {\n            this.opts.minYear = Year.min;\n        }\n        if (this.opts.maxYear > Year.max) {\n            this.opts.maxYear = Year.max;\n        }\n        if (this.disabled !== undefined) {\n            this.opts.componentDisabled = this.disabled;\n        }\n    };\n    MyDatePicker.prototype.getSelectorTopPosition = function () {\n        if (this.opts.openSelectorTopOfInput) {\n            return this.elem.nativeElement.children[0].offsetHeight + \"px\";\n        }\n    };\n    MyDatePicker.prototype.resetMonthYearSelect = function () {\n        this.selectMonth = false;\n        this.selectYear = false;\n    };\n    MyDatePicker.prototype.onSelectMonthClicked = function (event) {\n        event.stopPropagation();\n        this.selectMonth = !this.selectMonth;\n        this.selectYear = false;\n        this.cdr.detectChanges();\n        if (this.selectMonth) {\n            var today = this.getToday();\n            this.months.length = 0;\n            for (var i = 1; i <= 12; i += 3) {\n                var row = [];\n                for (var j = i; j < i + 3; j++) {\n                    var disabled = this.utilService.isMonthDisabledByDisableUntil({ year: this.visibleMonth.year, month: j, day: this.daysInMonth(j, this.visibleMonth.year) }, this.opts.disableUntil)\n                        || this.utilService.isMonthDisabledByDisableSince({ year: this.visibleMonth.year, month: j, day: 1 }, this.opts.disableSince);\n                    row.push({ nbr: j, name: this.opts.monthLabels[j], currMonth: j === today.month && this.visibleMonth.year === today.year, selected: j === this.visibleMonth.monthNbr, disabled: disabled });\n                }\n                this.months.push(row);\n            }\n        }\n    };\n    MyDatePicker.prototype.onMonthCellClicked = function (cell) {\n        var mc = cell.nbr !== this.visibleMonth.monthNbr;\n        this.visibleMonth = { monthTxt: this.monthText(cell.nbr), monthNbr: cell.nbr, year: this.visibleMonth.year };\n        this.generateCalendar(cell.nbr, this.visibleMonth.year, mc);\n        this.selectMonth = false;\n        this.selectorEl.nativeElement.focus();\n    };\n    MyDatePicker.prototype.onMonthCellKeyDown = function (event, cell) {\n        if ((event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) && !cell.disabled) {\n            event.preventDefault();\n            this.onMonthCellClicked(cell);\n        }\n    };\n    MyDatePicker.prototype.onSelectYearClicked = function (event) {\n        event.stopPropagation();\n        this.selectYear = !this.selectYear;\n        this.selectMonth = false;\n        this.cdr.detectChanges();\n        if (this.selectYear) {\n            this.generateYears(Number(this.visibleMonth.year));\n        }\n    };\n    MyDatePicker.prototype.onYearCellClicked = function (cell) {\n        var yc = cell.year !== this.visibleMonth.year;\n        this.visibleMonth = { monthTxt: this.visibleMonth.monthTxt, monthNbr: this.visibleMonth.monthNbr, year: cell.year };\n        this.generateCalendar(this.visibleMonth.monthNbr, cell.year, yc);\n        this.selectYear = false;\n        this.selectorEl.nativeElement.focus();\n    };\n    MyDatePicker.prototype.onYearCellKeyDown = function (event, cell) {\n        if ((event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) && !cell.disabled) {\n            event.preventDefault();\n            this.onYearCellClicked(cell);\n        }\n    };\n    MyDatePicker.prototype.onPrevYears = function (event, year) {\n        event.stopPropagation();\n        this.generateYears(Number(year) - 25);\n    };\n    MyDatePicker.prototype.onNextYears = function (event, year) {\n        event.stopPropagation();\n        this.generateYears(Number(year) + 25);\n    };\n    MyDatePicker.prototype.generateYears = function (year) {\n        this.years.length = 0;\n        var today = this.getToday();\n        for (var i = year; i <= 20 + year; i += 5) {\n            var row = [];\n            for (var j = i; j < i + 5; j++) {\n                var disabled = this.utilService.isMonthDisabledByDisableUntil({ year: j, month: this.visibleMonth.monthNbr, day: this.daysInMonth(this.visibleMonth.monthNbr, j) }, this.opts.disableUntil)\n                    || this.utilService.isMonthDisabledByDisableSince({ year: j, month: this.visibleMonth.monthNbr, day: 1 }, this.opts.disableSince);\n                var minMax = j < this.opts.minYear || j > this.opts.maxYear;\n                row.push({ year: j, currYear: j === today.year, selected: j === this.visibleMonth.year, disabled: disabled || minMax });\n            }\n            this.years.push(row);\n        }\n        this.prevYearsDisabled = this.years[0][0].year <= this.opts.minYear || this.utilService.isMonthDisabledByDisableUntil({ year: this.years[0][0].year - 1, month: this.visibleMonth.monthNbr, day: this.daysInMonth(this.visibleMonth.monthNbr, this.years[0][0].year - 1) }, this.opts.disableUntil);\n        this.nextYearsDisabled = this.years[4][4].year >= this.opts.maxYear || this.utilService.isMonthDisabledByDisableSince({ year: this.years[4][4].year + 1, month: this.visibleMonth.monthNbr, day: 1 }, this.opts.disableSince);\n    };\n    MyDatePicker.prototype.onUserDateInput = function (value) {\n        if (value.length === 0) {\n            if (this.utilService.isInitializedDate(this.selectedDate)) {\n                this.clearDate();\n            }\n            else {\n                this.invalidInputFieldChanged(value);\n            }\n        }\n        else {\n            var date = this.utilService.isDateValid(value, this.opts.dateFormat, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableWeekends, this.opts.disableWeekdays, this.opts.disableDays, this.opts.disableDateRanges, this.opts.monthLabels, this.opts.enableDays);\n            if (this.utilService.isInitializedDate(date)) {\n                if (!this.utilService.isSameDate(date, this.selectedDate)) {\n                    this.selectDate(date, CalToggle.CloseByDateSel);\n                }\n                else {\n                    this.updateDateValue(date);\n                }\n            }\n            else {\n                this.invalidInputFieldChanged(value);\n            }\n        }\n    };\n    MyDatePicker.prototype.onFocusInput = function (event) {\n        this.inputFocusBlur.emit({ reason: InputFocusBlur.focus, value: event.target.value });\n    };\n    MyDatePicker.prototype.onBlurInput = function (event) {\n        this.selectionDayTxt = event.target.value;\n        this.onTouchedCb();\n        this.inputFocusBlur.emit({ reason: InputFocusBlur.blur, value: event.target.value });\n    };\n    MyDatePicker.prototype.onCloseSelector = function (event) {\n        if (event.keyCode === KeyCode.esc && this.showSelector && !this.opts.inline) {\n            this.calendarToggle.emit(CalToggle.CloseByEsc);\n            this.showSelector = false;\n        }\n    };\n    MyDatePicker.prototype.invalidInputFieldChanged = function (value) {\n        this.invalidDate = value.length > 0;\n        this.inputFieldChanged.emit({ value: value, dateFormat: this.opts.dateFormat, valid: false });\n        this.onChangeCb(null);\n        this.onTouchedCb();\n    };\n    MyDatePicker.prototype.isTodayDisabled = function () {\n        this.disableTodayBtn = this.utilService.isDisabledDay(this.getToday(), this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableWeekends, this.opts.disableWeekdays, this.opts.disableDays, this.opts.disableDateRanges, this.opts.enableDays);\n    };\n    MyDatePicker.prototype.parseOptions = function () {\n        if (this.locale) {\n            this.setLocaleOptions();\n        }\n        this.setOptions();\n        var weekDays = this.utilService.getWeekDays();\n        this.isTodayDisabled();\n        this.dayIdx = weekDays.indexOf(this.opts.firstDayOfWeek);\n        if (this.dayIdx !== -1) {\n            var idx = this.dayIdx;\n            for (var i = 0; i < weekDays.length; i++) {\n                this.weekDays.push(this.opts.dayLabels[weekDays[idx]]);\n                idx = weekDays[idx] === \"sa\" ? 0 : idx + 1;\n            }\n        }\n    };\n    MyDatePicker.prototype.writeValue = function (value) {\n        if (value && (value[\"date\"] || value[\"jsdate\"] || value[\"formatted\"])) {\n            this.selectedDate = value[\"date\"] ? this.parseSelectedDate(value[\"date\"]) : value[\"jsdate\"] ? this.parseSelectedDate(this.jsDateToMyDate(value[\"jsdate\"])) : this.parseSelectedDate(value[\"formatted\"]);\n            var cvc = this.visibleMonth.year !== this.selectedDate.year || this.visibleMonth.monthNbr !== this.selectedDate.month;\n            if (cvc) {\n                this.visibleMonth = { monthTxt: this.opts.monthLabels[this.selectedDate.month], monthNbr: this.selectedDate.month, year: this.selectedDate.year };\n                this.generateCalendar(this.selectedDate.month, this.selectedDate.year, cvc);\n            }\n            this.selectionDayTxt = this.utilService.formatDate(this.selectedDate, this.opts.dateFormat, this.opts.monthLabels);\n        }\n        else if (value === null || value === \"\") {\n            this.selectedDate = { year: 0, month: 0, day: 0 };\n            this.selectionDayTxt = \"\";\n        }\n        this.inputFieldChanged.emit({ value: this.selectionDayTxt, dateFormat: this.opts.dateFormat, valid: this.selectionDayTxt.length > 0 });\n        this.invalidDate = false;\n    };\n    MyDatePicker.prototype.setDisabledState = function (disabled) {\n        this.opts.componentDisabled = disabled;\n    };\n    MyDatePicker.prototype.registerOnChange = function (fn) {\n        this.onChangeCb = fn;\n    };\n    MyDatePicker.prototype.registerOnTouched = function (fn) {\n        this.onTouchedCb = fn;\n    };\n    MyDatePicker.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes.hasOwnProperty(\"selector\")) {\n            var s = changes[\"selector\"].currentValue;\n            if (typeof s === \"object\") {\n                if (s.open) {\n                    this.showSelector = true;\n                    this.openSelector(CalToggle.Open);\n                }\n                else {\n                    this.showSelector = false;\n                    this.closeSelector(CalToggle.CloseByApi);\n                }\n            }\n            else if (s > 0) {\n                this.openBtnClicked();\n            }\n        }\n        if (changes.hasOwnProperty(\"placeholder\")) {\n            this.placeholder = changes[\"placeholder\"].currentValue;\n        }\n        if (changes.hasOwnProperty(\"locale\")) {\n            this.locale = changes[\"locale\"].currentValue;\n        }\n        if (changes.hasOwnProperty(\"disabled\")) {\n            this.disabled = changes[\"disabled\"].currentValue;\n        }\n        if (changes.hasOwnProperty(\"options\")) {\n            this.options = changes[\"options\"].currentValue;\n        }\n        this.weekDays.length = 0;\n        this.parseOptions();\n        var dmChange = false;\n        if (changes.hasOwnProperty(\"defaultMonth\")) {\n            var dm = changes[\"defaultMonth\"].currentValue;\n            if (typeof dm === \"object\") {\n                dm = dm.defMonth;\n            }\n            if (dm !== null && dm !== undefined && dm !== \"\") {\n                this.selectedMonth = this.parseSelectedMonth(dm);\n            }\n            else {\n                this.selectedMonth = { monthTxt: \"\", monthNbr: 0, year: 0 };\n            }\n            dmChange = true;\n        }\n        if (changes.hasOwnProperty(\"selDate\")) {\n            var sd = changes[\"selDate\"];\n            if (sd.currentValue !== null && sd.currentValue !== undefined && sd.currentValue !== \"\" && Object.keys(sd.currentValue).length !== 0) {\n                this.selectedDate = this.parseSelectedDate(sd.currentValue);\n                setTimeout(function () {\n                    _this.onChangeCb(_this.getDateModel(_this.selectedDate));\n                });\n            }\n            else {\n                if (!sd.isFirstChange()) {\n                    this.clearDate();\n                }\n            }\n        }\n        if (this.visibleMonth.year === 0 && this.visibleMonth.monthNbr === 0 || dmChange) {\n            this.setVisibleMonth();\n        }\n        else {\n            this.visibleMonth.monthTxt = this.opts.monthLabels[this.visibleMonth.monthNbr];\n            this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, false);\n        }\n    };\n    MyDatePicker.prototype.removeBtnClicked = function () {\n        this.clearDate();\n        if (this.showSelector) {\n            this.calendarToggle.emit(CalToggle.CloseByCalBtn);\n        }\n        this.showSelector = false;\n    };\n    MyDatePicker.prototype.onDecreaseBtnClicked = function () {\n        this.decreaseIncreaseDate(true);\n    };\n    MyDatePicker.prototype.onIncreaseBtnClicked = function () {\n        this.decreaseIncreaseDate(false);\n    };\n    MyDatePicker.prototype.openBtnClicked = function () {\n        this.showSelector = !this.showSelector;\n        this.cdr.detectChanges();\n        if (this.showSelector) {\n            this.openSelector(CalToggle.Open);\n        }\n        else {\n            this.closeSelector(CalToggle.CloseByCalBtn);\n        }\n    };\n    MyDatePicker.prototype.openSelector = function (reason) {\n        var _this = this;\n        this.globalListener = this.globalListener || this.renderer.listenGlobal(\"document\", \"click\", function (event) {\n            if (_this.showSelector && event.target && _this.elem.nativeElement !== event.target && !_this.elem.nativeElement.contains(event.target)) {\n                _this.showSelector = false;\n                _this.calendarToggle.emit(CalToggle.CloseByOutClick);\n            }\n            if (_this.opts.monthSelector || _this.opts.yearSelector) {\n                _this.resetMonthYearSelect();\n            }\n        });\n        this.setVisibleMonth();\n        this.calendarToggle.emit(reason);\n    };\n    MyDatePicker.prototype.closeSelector = function (reason) {\n        if (this.globalListener) {\n            this.globalListener();\n        }\n        this.calendarToggle.emit(reason);\n    };\n    MyDatePicker.prototype.setVisibleMonth = function () {\n        var y = 0, m = 0;\n        if (!this.utilService.isInitializedDate(this.selectedDate)) {\n            if (this.selectedMonth.year === 0 && this.selectedMonth.monthNbr === 0) {\n                var today = this.getToday();\n                y = today.year;\n                m = today.month;\n            }\n            else {\n                y = this.selectedMonth.year;\n                m = this.selectedMonth.monthNbr;\n            }\n        }\n        else {\n            y = this.selectedDate.year;\n            m = this.selectedDate.month;\n        }\n        this.visibleMonth = { monthTxt: this.opts.monthLabels[m], monthNbr: m, year: y };\n        this.generateCalendar(m, y, true);\n    };\n    MyDatePicker.prototype.onPrevMonth = function () {\n        var d = this.getDate(this.visibleMonth.year, this.visibleMonth.monthNbr, 1);\n        d.setMonth(d.getMonth() - 1);\n        var y = d.getFullYear();\n        var m = d.getMonth() + 1;\n        this.visibleMonth = { monthTxt: this.monthText(m), monthNbr: m, year: y };\n        this.generateCalendar(m, y, true);\n    };\n    MyDatePicker.prototype.onNextMonth = function () {\n        var d = this.getDate(this.visibleMonth.year, this.visibleMonth.monthNbr, 1);\n        d.setMonth(d.getMonth() + 1);\n        var y = d.getFullYear();\n        var m = d.getMonth() + 1;\n        this.visibleMonth = { monthTxt: this.monthText(m), monthNbr: m, year: y };\n        this.generateCalendar(m, y, true);\n    };\n    MyDatePicker.prototype.onPrevYear = function () {\n        this.visibleMonth.year--;\n        this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, true);\n    };\n    MyDatePicker.prototype.onNextYear = function () {\n        this.visibleMonth.year++;\n        this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, true);\n    };\n    MyDatePicker.prototype.onTodayClicked = function () {\n        var today = this.getToday();\n        this.selectDate(today, CalToggle.CloseByDateSel);\n        if (this.opts.inline && today.year !== this.visibleMonth.year || today.month !== this.visibleMonth.monthNbr) {\n            this.visibleMonth = { monthTxt: this.opts.monthLabels[today.month], monthNbr: today.month, year: today.year };\n            this.generateCalendar(today.month, today.year, true);\n        }\n    };\n    MyDatePicker.prototype.onCellClicked = function (cell) {\n        if (cell.cmo === this.prevMonthId) {\n            this.onPrevMonth();\n            if (!this.opts.allowSelectionOnlyInCurrentMonth) {\n                this.selectDate(cell.dateObj, CalToggle.CloseByDateSel);\n            }\n        }\n        else if (cell.cmo === this.currMonthId) {\n            if (this.opts.allowDeselectDate && this.utilService.isSameDate(cell.dateObj, this.selectedDate)) {\n                this.clearDate();\n            }\n            else {\n                this.selectDate(cell.dateObj, CalToggle.CloseByDateSel);\n            }\n        }\n        else if (cell.cmo === this.nextMonthId) {\n            this.onNextMonth();\n            if (!this.opts.allowSelectionOnlyInCurrentMonth) {\n                this.selectDate(cell.dateObj, CalToggle.CloseByDateSel);\n            }\n        }\n        this.resetMonthYearSelect();\n    };\n    MyDatePicker.prototype.onCellKeyDown = function (event, cell) {\n        if ((event.keyCode === KeyCode.enter || event.keyCode === KeyCode.space) && !cell.disabled) {\n            event.preventDefault();\n            this.onCellClicked(cell);\n        }\n    };\n    MyDatePicker.prototype.clearDate = function () {\n        this.updateDateValue({ year: 0, month: 0, day: 0 });\n        this.setFocusToInputBox();\n    };\n    MyDatePicker.prototype.decreaseIncreaseDate = function (decrease) {\n        var date = this.selectedDate;\n        if (this.utilService.isInitializedDate(date)) {\n            var d = this.getDate(date.year, date.month, date.day);\n            d.setDate(decrease ? d.getDate() - 1 : d.getDate() + 1);\n            date = { year: d.getFullYear(), month: d.getMonth() + 1, day: d.getDate() };\n        }\n        else {\n            date = this.getToday();\n        }\n        this.selectDate(date, CalToggle.CloseByCalBtn);\n    };\n    MyDatePicker.prototype.selectDate = function (date, closeReason) {\n        this.updateDateValue(date);\n        if (this.showSelector) {\n            this.calendarToggle.emit(closeReason);\n        }\n        this.showSelector = false;\n        this.setFocusToInputBox();\n    };\n    MyDatePicker.prototype.setFocusToInputBox = function () {\n        var _this = this;\n        if (!this.opts.inline && this.opts.showInputField) {\n            setTimeout(function () {\n                _this.inputBoxEl.nativeElement.focus();\n            }, 100);\n        }\n    };\n    MyDatePicker.prototype.updateDateValue = function (date) {\n        var clear = !this.utilService.isInitializedDate(date);\n        this.selectedDate = date;\n        this.emitDateChanged(date);\n        if (!this.opts.inline) {\n            this.selectionDayTxt = clear ? \"\" : this.utilService.formatDate(date, this.opts.dateFormat, this.opts.monthLabels);\n            this.inputFieldChanged.emit({ value: this.selectionDayTxt, dateFormat: this.opts.dateFormat, valid: !clear });\n            this.invalidDate = false;\n        }\n    };\n    MyDatePicker.prototype.emitDateChanged = function (date) {\n        if (this.utilService.isInitializedDate(date)) {\n            var dateModel = this.getDateModel(date);\n            this.dateChanged.emit(dateModel);\n            this.onChangeCb(dateModel);\n            this.onTouchedCb();\n        }\n        else {\n            this.dateChanged.emit({ date: date, jsdate: null, formatted: \"\", epoc: 0 });\n            this.onChangeCb(null);\n            this.onTouchedCb();\n        }\n    };\n    MyDatePicker.prototype.getDateModel = function (date) {\n        return { date: date, jsdate: this.getDate(date.year, date.month, date.day), formatted: this.utilService.formatDate(date, this.opts.dateFormat, this.opts.monthLabels), epoc: Math.round(this.getTimeInMilliseconds(date) / 1000.0) };\n    };\n    MyDatePicker.prototype.monthText = function (m) {\n        return this.opts.monthLabels[m];\n    };\n    MyDatePicker.prototype.monthStartIdx = function (y, m) {\n        var d = new Date();\n        d.setDate(1);\n        d.setMonth(m - 1);\n        d.setFullYear(y);\n        var idx = d.getDay() + this.sundayIdx();\n        return idx >= 7 ? idx - 7 : idx;\n    };\n    MyDatePicker.prototype.daysInMonth = function (m, y) {\n        return new Date(y, m, 0).getDate();\n    };\n    MyDatePicker.prototype.daysInPrevMonth = function (m, y) {\n        var d = this.getDate(y, m, 1);\n        d.setMonth(d.getMonth() - 1);\n        return this.daysInMonth(d.getMonth() + 1, d.getFullYear());\n    };\n    MyDatePicker.prototype.isCurrDay = function (d, m, y, cmo, today) {\n        return d === today.day && m === today.month && y === today.year && cmo === this.currMonthId;\n    };\n    MyDatePicker.prototype.getToday = function () {\n        var date = new Date();\n        return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };\n    };\n    MyDatePicker.prototype.getTimeInMilliseconds = function (date) {\n        return this.getDate(date.year, date.month, date.day).getTime();\n    };\n    MyDatePicker.prototype.getWeekday = function (date) {\n        var weekDays = this.utilService.getWeekDays();\n        return weekDays[this.utilService.getDayNumber(date)];\n    };\n    MyDatePicker.prototype.getDate = function (year, month, day) {\n        return new Date(year, month - 1, day, 0, 0, 0, 0);\n    };\n    MyDatePicker.prototype.sundayIdx = function () {\n        return this.dayIdx > 0 ? 7 - this.dayIdx : 0;\n    };\n    MyDatePicker.prototype.generateCalendar = function (m, y, notifyChange) {\n        this.dates.length = 0;\n        var today = this.getToday();\n        var monthStart = this.monthStartIdx(y, m);\n        var dInThisM = this.daysInMonth(m, y);\n        var dInPrevM = this.daysInPrevMonth(m, y);\n        var dayNbr = 1;\n        var cmo = this.prevMonthId;\n        for (var i = 1; i < 7; i++) {\n            var week = [];\n            if (i === 1) {\n                var pm = dInPrevM - monthStart + 1;\n                for (var j = pm; j <= dInPrevM; j++) {\n                    var date = { year: m === 1 ? y - 1 : y, month: m === 1 ? 12 : m - 1, day: j };\n                    week.push({ dateObj: date, cmo: cmo, currDay: this.isCurrDay(j, m, y, cmo, today),\n                        disabled: this.utilService.isDisabledDay(date, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableWeekends, this.opts.disableWeekdays, this.opts.disableDays, this.opts.disableDateRanges, this.opts.enableDays),\n                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),\n                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates) });\n                }\n                cmo = this.currMonthId;\n                var daysLeft = 7 - week.length;\n                for (var j = 0; j < daysLeft; j++) {\n                    var date = { year: y, month: m, day: dayNbr };\n                    week.push({ dateObj: date, cmo: cmo, currDay: this.isCurrDay(dayNbr, m, y, cmo, today),\n                        disabled: this.utilService.isDisabledDay(date, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableWeekends, this.opts.disableWeekdays, this.opts.disableDays, this.opts.disableDateRanges, this.opts.enableDays),\n                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),\n                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates) });\n                    dayNbr++;\n                }\n            }\n            else {\n                for (var j = 1; j < 8; j++) {\n                    if (dayNbr > dInThisM) {\n                        dayNbr = 1;\n                        cmo = this.nextMonthId;\n                    }\n                    var date = { year: cmo === this.nextMonthId && m === 12 ? y + 1 : y, month: cmo === this.currMonthId ? m : cmo === this.nextMonthId && m < 12 ? m + 1 : 1, day: dayNbr };\n                    week.push({ dateObj: date, cmo: cmo, currDay: this.isCurrDay(dayNbr, m, y, cmo, today),\n                        disabled: this.utilService.isDisabledDay(date, this.opts.minYear, this.opts.maxYear, this.opts.disableUntil, this.opts.disableSince, this.opts.disableWeekends, this.opts.disableWeekdays, this.opts.disableDays, this.opts.disableDateRanges, this.opts.enableDays),\n                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),\n                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates) });\n                    dayNbr++;\n                }\n            }\n            var weekNbr = this.opts.showWeekNumbers && this.opts.firstDayOfWeek === \"mo\" ? this.utilService.getWeekNumber(week[0].dateObj) : 0;\n            this.dates.push({ week: week, weekNbr: weekNbr });\n        }\n        this.setHeaderBtnDisabledState(m, y);\n        if (notifyChange) {\n            this.calendarViewChanged.emit({ year: y, month: m, first: { number: 1, weekday: this.getWeekday({ year: y, month: m, day: 1 }) }, last: { number: dInThisM, weekday: this.getWeekday({ year: y, month: m, day: dInThisM }) } });\n        }\n    };\n    MyDatePicker.prototype.parseSelectedDate = function (selDate) {\n        var date = { day: 0, month: 0, year: 0 };\n        if (typeof selDate === \"string\") {\n            var sd = selDate;\n            var df = this.opts.dateFormat;\n            var delimeters = this.utilService.getDateFormatDelimeters(df);\n            var dateValue = this.utilService.getDateValue(sd, df, delimeters);\n            date.year = this.utilService.getNumberByValue(dateValue[0]);\n            date.month = df.indexOf(MMM) !== -1 ? this.utilService.getMonthNumberByMonthName(dateValue[1], this.opts.monthLabels) : this.utilService.getNumberByValue(dateValue[1]);\n            date.day = this.utilService.getNumberByValue(dateValue[2]);\n        }\n        else if (typeof selDate === \"object\") {\n            date = selDate;\n        }\n        this.selectionDayTxt = this.utilService.formatDate(date, this.opts.dateFormat, this.opts.monthLabels);\n        return date;\n    };\n    MyDatePicker.prototype.jsDateToMyDate = function (date) {\n        return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };\n    };\n    MyDatePicker.prototype.parseSelectedMonth = function (ms) {\n        return this.utilService.parseDefaultMonth(ms);\n    };\n    MyDatePicker.prototype.setHeaderBtnDisabledState = function (m, y) {\n        var dpm = false;\n        var dpy = false;\n        var dnm = false;\n        var dny = false;\n        if (this.opts.disableHeaderButtons) {\n            dpm = this.utilService.isMonthDisabledByDisableUntil({ year: m === 1 ? y - 1 : y, month: m === 1 ? 12 : m - 1, day: this.daysInMonth(m === 1 ? 12 : m - 1, m === 1 ? y - 1 : y) }, this.opts.disableUntil);\n            dpy = this.utilService.isMonthDisabledByDisableUntil({ year: y - 1, month: m, day: this.daysInMonth(m, y - 1) }, this.opts.disableUntil);\n            dnm = this.utilService.isMonthDisabledByDisableSince({ year: m === 12 ? y + 1 : y, month: m === 12 ? 1 : m + 1, day: 1 }, this.opts.disableSince);\n            dny = this.utilService.isMonthDisabledByDisableSince({ year: y + 1, month: m, day: 1 }, this.opts.disableSince);\n        }\n        this.prevMonthDisabled = m === 1 && y === this.opts.minYear || dpm;\n        this.prevYearDisabled = y - 1 < this.opts.minYear || dpy;\n        this.nextMonthDisabled = m === 12 && y === this.opts.maxYear || dnm;\n        this.nextYearDisabled = y + 1 > this.opts.maxYear || dny;\n    };\n    MyDatePicker.prototype.ngOnDestroy = function () {\n        if (this.globalListener) {\n            this.globalListener();\n        }\n    };\n    MyDatePicker.ctorParameters = [\n        { type: ElementRef, },\n        { type: Renderer, },\n        { type: ChangeDetectorRef, },\n        { type: LocaleService, },\n        { type: UtilService, },\n    ];\n    return MyDatePicker;\n}());\n//# sourceMappingURL=my-date-picker.component.js.map\n",null]}