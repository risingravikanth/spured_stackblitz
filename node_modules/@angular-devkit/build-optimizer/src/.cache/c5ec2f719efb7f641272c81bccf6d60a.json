{"remainingRequest":"E:\\Ravikanth\\spured_new\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!E:\\Ravikanth\\spured_new\\node_modules\\ngx-infinite-scroll\\modules\\ngx-infinite-scroll.es5.js","dependencies":[{"path":"E:\\Ravikanth\\spured_new\\node_modules\\ngx-infinite-scroll\\modules\\ngx-infinite-scroll.es5.js","mtime":1529076053000},{"path":"E:\\Ravikanth\\spured_new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1571556314130},{"path":"E:\\Ravikanth\\spured_new\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Directive, ElementRef, EventEmitter, Input, NgModule, NgZone, Output } from '@angular/core';\nimport { fromEvent, of } from 'rxjs';\nimport { filter, map, mergeMap, sampleTime, tap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} selector\n * @param {?} scrollWindow\n * @param {?} defaultElement\n * @param {?} fromRoot\n * @return {?}\n */\nfunction resolveContainerElement(selector, scrollWindow, defaultElement, fromRoot) {\n    var /** @type {?} */ hasWindow = window && !!window.document && window.document.documentElement;\n    var /** @type {?} */ container = hasWindow && scrollWindow ? window : defaultElement;\n    if (selector) {\n        var /** @type {?} */ containerIsString = selector && hasWindow && typeof selector === 'string';\n        container = containerIsString\n            ? findElement(selector, defaultElement.nativeElement, fromRoot)\n            : selector;\n        if (!container) {\n            throw new Error('ngx-infinite-scroll {resolveContainerElement()}: selector for');\n        }\n    }\n    return container;\n}\n/**\n * @param {?} selector\n * @param {?} customRoot\n * @param {?} fromRoot\n * @return {?}\n */\nfunction findElement(selector, customRoot, fromRoot) {\n    var /** @type {?} */ rootEl = fromRoot ? window.document : customRoot;\n    return rootEl.querySelector(selector);\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction inputPropChanged(prop) {\n    return prop && !prop.firstChange;\n}\n/**\n * @return {?}\n */\nfunction hasWindowDefined() {\n    return typeof window !== 'undefined';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar VerticalProps = {\n    clientHeight: \"clientHeight\",\n    offsetHeight: \"offsetHeight\",\n    scrollHeight: \"scrollHeight\",\n    pageYOffset: \"pageYOffset\",\n    offsetTop: \"offsetTop\",\n    scrollTop: \"scrollTop\",\n    top: \"top\"\n};\nvar HorizontalProps = {\n    clientHeight: \"clientWidth\",\n    offsetHeight: \"offsetWidth\",\n    scrollHeight: \"scrollWidth\",\n    pageYOffset: \"pageXOffset\",\n    offsetTop: \"offsetLeft\",\n    scrollTop: \"scrollLeft\",\n    top: \"left\"\n};\nvar AxisResolver = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?=} vertical\n     */\n    function AxisResolver(vertical) {\n        if (vertical === void 0) {\n            vertical = true;\n        }\n        this.vertical = vertical;\n        this.propsMap = vertical ? VerticalProps : HorizontalProps;\n    }\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.clientHeightKey = function () {\n        return this.propsMap.clientHeight;\n    };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.offsetHeightKey = function () {\n        return this.propsMap.offsetHeight;\n    };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.scrollHeightKey = function () {\n        return this.propsMap.scrollHeight;\n    };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.pageYOffsetKey = function () {\n        return this.propsMap.pageYOffset;\n    };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.offsetTopKey = function () {\n        return this.propsMap.offsetTop;\n    };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.scrollTopKey = function () {\n        return this.propsMap.scrollTop;\n    };\n    /**\n     * @return {?}\n     */\n    AxisResolver.prototype.topKey = function () {\n        return this.propsMap.top;\n    };\n    return AxisResolver;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\n/**\n * @record\n */\n/**\n * @record\n */\n/**\n * @record\n */\n/**\n * @param {?} alwaysCallback\n * @param {?} shouldFireScrollEvent\n * @param {?} isTriggeredCurrentTotal\n * @return {?}\n */\nfunction shouldTriggerEvents(alwaysCallback, shouldFireScrollEvent, isTriggeredCurrentTotal) {\n    return (alwaysCallback || shouldFireScrollEvent) && !isTriggeredCurrentTotal;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createResolver(_a) {\n    var windowElement = _a.windowElement, axis = _a.axis;\n    return createResolverWithContainer({ axis: axis, isWindow: isElementWindow(windowElement) }, windowElement);\n}\n/**\n * @param {?} resolver\n * @param {?} windowElement\n * @return {?}\n */\nfunction createResolverWithContainer(resolver, windowElement) {\n    var /** @type {?} */ container = resolver.isWindow || (windowElement && !windowElement.nativeElement)\n        ? windowElement\n        : windowElement.nativeElement;\n    return Object.assign({}, resolver, { container: container });\n}\n/**\n * @param {?} windowElement\n * @return {?}\n */\nfunction isElementWindow(windowElement) {\n    var /** @type {?} */ isWindow = ['Window', 'global'].some(function (obj) { return Object.prototype.toString.call(windowElement).includes(obj); });\n    return isWindow;\n}\n/**\n * @param {?} isContainerWindow\n * @param {?} windowElement\n * @return {?}\n */\nfunction getDocumentElement(isContainerWindow, windowElement) {\n    return isContainerWindow ? windowElement.document.documentElement : null;\n}\n/**\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePoints(element, resolver) {\n    var /** @type {?} */ height = extractHeightForElement(resolver);\n    return resolver.isWindow\n        ? calculatePointsForWindow(height, element, resolver)\n        : calculatePointsForElement(height, element, resolver);\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForWindow(height, element, resolver) {\n    var axis = resolver.axis, container = resolver.container, isWindow = resolver.isWindow;\n    var _a = extractHeightPropKeys(axis), offsetHeightKey = _a.offsetHeightKey, clientHeightKey = _a.clientHeightKey;\n    // scrolled until now / current y point\n    var /** @type {?} */ scrolled = height +\n        getElementPageYOffset(getDocumentElement(isWindow, container), axis, isWindow);\n    // total height / most bottom y point\n    var /** @type {?} */ nativeElementHeight = getElementHeight(element.nativeElement, isWindow, offsetHeightKey, clientHeightKey);\n    var /** @type {?} */ totalToScroll = getElementOffsetTop(element.nativeElement, axis, isWindow) +\n        nativeElementHeight;\n    return { height: height, scrolled: scrolled, totalToScroll: totalToScroll };\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForElement(height, element, resolver) {\n    var axis = resolver.axis, container = resolver.container;\n    // perhaps use container.offsetTop instead of 'scrollTop'\n    var /** @type {?} */ scrolled = container[axis.scrollTopKey()];\n    var /** @type {?} */ totalToScroll = container[axis.scrollHeightKey()];\n    return { height: height, scrolled: scrolled, totalToScroll: totalToScroll };\n}\n/**\n * @param {?} axis\n * @return {?}\n */\nfunction extractHeightPropKeys(axis) {\n    return {\n        offsetHeightKey: axis.offsetHeightKey(),\n        clientHeightKey: axis.clientHeightKey()\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction extractHeightForElement(_a) {\n    var container = _a.container, isWindow = _a.isWindow, axis = _a.axis;\n    var _b = extractHeightPropKeys(axis), offsetHeightKey = _b.offsetHeightKey, clientHeightKey = _b.clientHeightKey;\n    return getElementHeight(container, isWindow, offsetHeightKey, clientHeightKey);\n}\n/**\n * @param {?} elem\n * @param {?} isWindow\n * @param {?} offsetHeightKey\n * @param {?} clientHeightKey\n * @return {?}\n */\nfunction getElementHeight(elem, isWindow, offsetHeightKey, clientHeightKey) {\n    if (isNaN(elem[offsetHeightKey])) {\n        var /** @type {?} */ docElem = getDocumentElement(isWindow, elem);\n        return docElem ? docElem[clientHeightKey] : 0;\n    }\n    else {\n        return elem[offsetHeightKey];\n    }\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementOffsetTop(elem, axis, isWindow) {\n    var /** @type {?} */ topKey = axis.topKey();\n    // elem = elem.nativeElement;\n    if (!elem.getBoundingClientRect) {\n        // || elem.css('none')) {\n        return;\n    }\n    return (elem.getBoundingClientRect()[topKey] +\n        getElementPageYOffset(elem, axis, isWindow));\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementPageYOffset(elem, axis, isWindow) {\n    var /** @type {?} */ pageYOffset = axis.pageYOffsetKey();\n    var /** @type {?} */ scrollTop = axis.scrollTopKey();\n    var /** @type {?} */ offsetTop = axis.offsetTopKey();\n    if (isNaN(window[pageYOffset])) {\n        return getDocumentElement(isWindow, elem)[scrollTop];\n    }\n    else if (elem.ownerDocument) {\n        return elem.ownerDocument.defaultView[pageYOffset];\n    }\n    else {\n        return elem[offsetTop];\n    }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} container\n * @param {?} distance\n * @param {?} scrollingDown\n * @return {?}\n */\nfunction shouldFireScrollEvent(container, distance, scrollingDown) {\n    var /** @type {?} */ remaining;\n    var /** @type {?} */ containerBreakpoint;\n    if (container.totalToScroll <= 0) {\n        return false;\n    }\n    var /** @type {?} */ scrolledUntilNow = container.height + container.scrolled;\n    if (scrollingDown) {\n        remaining =\n            (container.totalToScroll - scrolledUntilNow) / container.totalToScroll;\n        containerBreakpoint = distance.down / 10;\n    }\n    else {\n        var /** @type {?} */ totalHiddenContentHeight = container.scrolled + (container.totalToScroll - scrolledUntilNow);\n        remaining = container.scrolled / totalHiddenContentHeight;\n        containerBreakpoint = distance.up / 10;\n    }\n    var /** @type {?} */ shouldFireEvent = remaining <= containerBreakpoint;\n    return shouldFireEvent;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @return {?}\n */\nfunction isScrollingDownwards(lastScrollPosition, container) {\n    return lastScrollPosition < container.scrolled;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @param {?} distance\n * @return {?}\n */\nfunction getScrollStats(lastScrollPosition, container, distance) {\n    var /** @type {?} */ scrollDown = isScrollingDownwards(lastScrollPosition, container);\n    return {\n        fire: shouldFireScrollEvent(container, distance, scrollDown),\n        scrollDown: scrollDown\n    };\n}\n/**\n * @param {?} position\n * @param {?} scrollState\n * @return {?}\n */\nfunction updateScrollPosition(position, scrollState) {\n    return (scrollState.lastScrollPosition = position);\n}\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @return {?}\n */\nfunction updateTotalToScroll(totalToScroll, scrollState) {\n    if (scrollState.lastTotalToScroll !== totalToScroll) {\n        scrollState.lastTotalToScroll = scrollState.totalToScroll;\n        scrollState.totalToScroll = totalToScroll;\n    }\n}\n/**\n * @param {?} scrollState\n * @return {?}\n */\n/**\n * @param {?} scroll\n * @param {?} scrollState\n * @param {?} triggered\n * @param {?} isScrollingDown\n * @return {?}\n */\nfunction updateTriggeredFlag(scroll, scrollState, triggered, isScrollingDown) {\n    if (isScrollingDown) {\n        scrollState.triggered.down = scroll;\n    }\n    else {\n        scrollState.triggered.up = scroll;\n    }\n}\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @param {?} isScrollingDown\n * @return {?}\n */\nfunction isTriggeredScroll(totalToScroll, scrollState, isScrollingDown) {\n    return isScrollingDown\n        ? scrollState.triggered.down === totalToScroll\n        : scrollState.triggered.up === totalToScroll;\n}\n/**\n * @param {?} scrollState\n * @param {?} scrolledUntilNow\n * @param {?} totalToScroll\n * @return {?}\n */\nfunction updateScrollState(scrollState, scrolledUntilNow, totalToScroll) {\n    updateScrollPosition(scrolledUntilNow, scrollState);\n    updateTotalToScroll(totalToScroll, scrollState);\n    // const isSameTotal = isSameTotalToScroll(scrollState);\n    // if (!isSameTotal) {\n    //   updateTriggeredFlag(scrollState, false, isScrollingDown);\n    // }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction createScroller(config) {\n    var scrollContainer = config.scrollContainer, scrollWindow = config.scrollWindow, element = config.element, fromRoot = config.fromRoot;\n    var /** @type {?} */ resolver = createResolver({\n        axis: new AxisResolver(!config.horizontal),\n        windowElement: resolveContainerElement(scrollContainer, scrollWindow, element, fromRoot)\n    });\n    var startWithTotal = calculatePoints(element, resolver).totalToScroll;\n    var /** @type {?} */ scrollState = {\n        lastScrollPosition: 0,\n        lastTotalToScroll: 0,\n        totalToScroll: startWithTotal,\n        triggered: {\n            down: 0,\n            up: 0\n        }\n    };\n    var /** @type {?} */ options = {\n        container: resolver.container,\n        throttle: config.throttle\n    };\n    var /** @type {?} */ distance = {\n        up: config.upDistance,\n        down: config.downDistance\n    };\n    return attachScrollEvent(options).pipe(mergeMap(function (ev) { return of(calculatePoints(element, resolver)); }), map(function (positionStats) { return toInfiniteScrollParams(scrollState.lastScrollPosition, positionStats, distance); }), tap(function (_a) {\n        var stats = _a.stats, scrollDown = _a.scrollDown;\n        return updateScrollState(scrollState, stats.scrolled, stats.totalToScroll);\n    }), filter(function (_a) {\n        var fire = _a.fire, scrollDown = _a.scrollDown, totalToScroll = _a.stats.totalToScroll;\n        return shouldTriggerEvents(config.alwaysCallback, fire, isTriggeredScroll(totalToScroll, scrollState, scrollDown));\n    }), tap(function (_a) {\n        var scrollDown = _a.scrollDown, totalToScroll = _a.stats.totalToScroll;\n        updateTriggeredFlag(totalToScroll, scrollState, true, scrollDown);\n    }), map(toInfiniteScrollAction));\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction attachScrollEvent(options) {\n    var /** @type {?} */ obs = fromEvent(options.container, \"scroll\");\n    // For an unknown reason calling `sampleTime()` causes trouble for many users, even with `options.throttle = 0`.\n    // Let's avoid calling the function unless needed.\n    // See https://github.com/orizens/ngx-infinite-scroll/issues/198\n    if (options.throttle) {\n        obs = obs.pipe(sampleTime(options.throttle));\n    }\n    return obs;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} stats\n * @param {?} distance\n * @return {?}\n */\nfunction toInfiniteScrollParams(lastScrollPosition, stats, distance) {\n    var _a = getScrollStats(lastScrollPosition, stats, distance), scrollDown = _a.scrollDown, fire = _a.fire;\n    return {\n        scrollDown: scrollDown,\n        fire: fire,\n        stats: stats\n    };\n}\nvar InfiniteScrollActions = {\n    DOWN: \"[NGX_ISE] DOWN\",\n    UP: \"[NGX_ISE] UP\"\n};\n/**\n * @param {?} response\n * @return {?}\n */\nfunction toInfiniteScrollAction(response) {\n    var scrollDown = response.scrollDown, currentScrollPosition = response.stats.scrolled;\n    return {\n        type: scrollDown ? InfiniteScrollActions.DOWN : InfiniteScrollActions.UP,\n        payload: {\n            currentScrollPosition: currentScrollPosition\n        }\n    };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar InfiniteScrollDirective = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param {?} element\n     * @param {?} zone\n     */\n    function InfiniteScrollDirective(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.scrolled = new EventEmitter();\n        this.scrolledUp = new EventEmitter();\n        this.infiniteScrollDistance = 2;\n        this.infiniteScrollUpDistance = 1.5;\n        this.infiniteScrollThrottle = 150;\n        this.infiniteScrollDisabled = false;\n        this.infiniteScrollContainer = null;\n        this.scrollWindow = true;\n        this.immediateCheck = false;\n        this.horizontal = false;\n        this.alwaysCallback = false;\n        this.fromRoot = false;\n    }\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.ngAfterViewInit = function () {\n        if (!this.infiniteScrollDisabled) {\n            this.setup();\n        }\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.ngOnChanges = function (_a) {\n        var infiniteScrollContainer = _a.infiniteScrollContainer, infiniteScrollDisabled = _a.infiniteScrollDisabled, infiniteScrollDistance = _a.infiniteScrollDistance;\n        var /** @type {?} */ containerChanged = inputPropChanged(infiniteScrollContainer);\n        var /** @type {?} */ disabledChanged = inputPropChanged(infiniteScrollDisabled);\n        var /** @type {?} */ distanceChanged = inputPropChanged(infiniteScrollDistance);\n        var /** @type {?} */ shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||\n            (disabledChanged && !infiniteScrollDisabled.currentValue) || distanceChanged;\n        if (containerChanged || disabledChanged || distanceChanged) {\n            this.destroyScroller();\n            if (shouldSetup) {\n                this.setup();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.setup = function () {\n        var _this = this;\n        if (hasWindowDefined()) {\n            this.zone.runOutsideAngular(function () {\n                _this.disposeScroller = createScroller({\n                    fromRoot: _this.fromRoot,\n                    alwaysCallback: _this.alwaysCallback,\n                    disable: _this.infiniteScrollDisabled,\n                    downDistance: _this.infiniteScrollDistance,\n                    element: _this.element,\n                    horizontal: _this.horizontal,\n                    scrollContainer: _this.infiniteScrollContainer,\n                    scrollWindow: _this.scrollWindow,\n                    throttle: _this.infiniteScrollThrottle,\n                    upDistance: _this.infiniteScrollUpDistance\n                }).subscribe(function (payload) { return _this.zone.run(function () { return _this.handleOnScroll(payload); }); });\n            });\n        }\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.handleOnScroll = function (_a) {\n        var type = _a.type, payload = _a.payload;\n        switch (type) {\n            case InfiniteScrollActions.DOWN:\n                return this.scrolled.emit(payload);\n            case InfiniteScrollActions.UP:\n                return this.scrolledUp.emit(payload);\n            default:\n                return;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.ngOnDestroy = function () {\n        this.destroyScroller();\n    };\n    /**\n     * @return {?}\n     */\n    InfiniteScrollDirective.prototype.destroyScroller = function () {\n        if (this.disposeScroller) {\n            this.disposeScroller.unsubscribe();\n        }\n    };\n    return InfiniteScrollDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar InfiniteScrollModule = /** @class */ /*@__PURE__*/ (function () {\n    function InfiniteScrollModule() {\n    }\n    return InfiniteScrollModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * Entry point for all public APIs of the package.\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { InfiniteScrollDirective, InfiniteScrollModule };\n//# sourceMappingURL=ngx-infinite-scroll.es5.js.map\n",null]}