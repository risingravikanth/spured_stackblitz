{"remainingRequest":"E:\\Ravikanth\\spured_new\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!E:\\Ravikanth\\spured_new\\node_modules\\@ngx-utils\\cookies\\src\\browser\\browser-cookies.service.js","dependencies":[{"path":"E:\\Ravikanth\\spured_new\\node_modules\\@ngx-utils\\cookies\\src\\browser\\browser-cookies.service.js","mtime":499162500000},{"path":"E:\\Ravikanth\\spured_new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1571556314130},{"path":"E:\\Ravikanth\\spured_new\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Injectable } from '@angular/core';\nimport { CookiesService } from '../cookies.service';\nimport { CookiesOptionsService } from '../cookies-options.service';\nimport { isBlank, isString, mergeOptions, safeDecodeURIComponent } from '../utils';\nvar BrowserCookiesService = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(BrowserCookiesService, _super);\n    function BrowserCookiesService(cookiesOptions) {\n        return _super.call(this, cookiesOptions) || this;\n    }\n    Object.defineProperty(BrowserCookiesService.prototype, \"cookieString\", {\n        get: function () {\n            return document.cookie || '';\n        },\n        set: function (val) {\n            document.cookie = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BrowserCookiesService.prototype.cookiesReader = function () {\n        var lastCookies = {};\n        var lastCookieString = '';\n        var cookiesArray, cookie, i, index, name;\n        var currentCookieString = this.cookieString;\n        if (currentCookieString !== lastCookieString) {\n            lastCookieString = currentCookieString;\n            cookiesArray = lastCookieString.split('; ');\n            lastCookies = {};\n            for (i = 0; i < cookiesArray.length; i++) {\n                cookie = cookiesArray[i];\n                index = cookie.indexOf('=');\n                if (index > 0) {\n                    // ignore nameless cookies\n                    name = safeDecodeURIComponent(cookie.substring(0, index));\n                    if (isBlank(lastCookies[name])) {\n                        lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n                    }\n                }\n            }\n        }\n        return lastCookies;\n    };\n    BrowserCookiesService.prototype.cookiesWriter = function () {\n        var _this = this;\n        return function (name, value, options) {\n            _this.cookieString = _this.buildCookieString(name, value, options);\n        };\n    };\n    BrowserCookiesService.prototype.buildCookieString = function (name, value, options) {\n        var opts = mergeOptions(this.options, options);\n        var expires = opts.expires;\n        if (isBlank(value)) {\n            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n            value = '';\n        }\n        if (isString(expires)) {\n            expires = new Date(expires);\n        }\n        var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n        str += opts.path ? ';path=' + opts.path : '';\n        str += opts.domain ? ';domain=' + opts.domain : '';\n        str += expires ? ';expires=' + expires.toUTCString() : '';\n        str += opts.secure ? ';secure' : '';\n        var cookiesLength = str.length + 1;\n        if (cookiesLength > 4096) {\n            console.log(\"Cookie '\" + name + \"' possibly not set or overflowed because it was too\\n      large (\" + cookiesLength + \" > 4096 bytes)!\");\n        }\n        return str;\n    };\n    return BrowserCookiesService;\n}(CookiesService));\nexport { BrowserCookiesService };\n//# sourceMappingURL=browser-cookies.service.js.map\n",null]}