{"version":3,"file":"cookies.service.js","sourceRoot":"","sources":["../../src/cookies.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;;IAMtC,wBAAY,cAAqC;QAC/C,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;KACvC;IAED,4BAAG,GAAH,UAAI,GAAW,EAAE,KAAa,EAAE,OAAwB;QACtD,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;KAC3C;IAED,kCAAS,GAAT,UAAU,GAAW,EAAE,KAAa,EAAE,OAAwB;QAC5D,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;KAC/C;IAED,4BAAG,GAAH,UAAI,GAAW;QACb,MAAM,CAAO,IAAI,CAAC,aAAa,EAAG,CAAC,GAAG,CAAC,CAAC;KACzC;IAED,kCAAS,GAAT,UAAU,GAAW;QACnB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;KAC7C;IAED,+BAAM,GAAN;QACE,MAAM,CAAM,IAAI,CAAC,aAAa,EAAE,CAAC;KAClC;IAED,+BAAM,GAAN,UAAO,GAAW,EAAE,OAAwB;QAC1C,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KAC/C;IAED,kCAAS,GAAT;QAAA,iBAKC;QAJC,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAC9B,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAClB,CAAC,CAAC;KACJ;IAES,sCAAa,GAAvB;QACE,MAAM,CAAC,EAAG,CAAC;KACZ;IAES,sCAAa,GAAvB;QACE,MAAM,CAAC,eAAS,CAAC;KAClB;;gBA9CF,UAAU;;;;gBAHF,qBAAqB;;yBAH9B;;SAOa,cAAc","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { CookiesOptions } from './cookies-options';\nimport { CookiesOptionsService } from './cookies-options.service';\nimport { safeJsonParse } from './utils';\n\n@Injectable()\nexport class CookiesService {\n  protected options: CookiesOptions;\n\n  constructor(cookiesOptions: CookiesOptionsService) {\n    this.options = cookiesOptions.options;\n  }\n\n  put(key: string, value: string, options?: CookiesOptions): void {\n    this.cookiesWriter()(key, value, options);\n  }\n\n  putObject(key: string, value: Object, options?: CookiesOptions): void {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  get(key: string): string {\n    return (<any>this.cookiesReader())[key];\n  }\n\n  getObject(key: string): { [key: string]: string } | string {\n    const value = this.get(key);\n    return value ? safeJsonParse(value) : value;\n  }\n\n  getAll(): { [key: string]: string } {\n    return <any>this.cookiesReader();\n  }\n\n  remove(key: string, options?: CookiesOptions): void {\n    this.cookiesWriter()(key, undefined, options);\n  }\n\n  removeAll(): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => {\n      this.remove(key);\n    });\n  }\n\n  protected cookiesReader(): { [key: string]: any } {\n    return { };\n  }\n\n  protected cookiesWriter(): (name: string, value: string | undefined, options?: CookiesOptions) => void {\n    return () => { };\n  }\n}\n"]}