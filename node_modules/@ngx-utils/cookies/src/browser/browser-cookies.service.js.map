{"version":3,"file":"browser-cookies.service.js","sourceRoot":"","sources":["../../../src/browser/browser-cookies.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { CookiesService } from '../cookies.service';\nimport { CookiesOptions } from '../cookies-options';\nimport { CookiesOptionsService } from '../cookies-options.service';\nimport { isBlank, isString, mergeOptions, safeDecodeURIComponent } from '../utils';\n\n@Injectable()\nexport class BrowserCookiesService extends CookiesService {\n  get cookieString(): string {\n    return document.cookie || '';\n  }\n\n  set cookieString(val: string) {\n    document.cookie = val;\n  }\n\n  constructor(cookiesOptions: CookiesOptionsService) {\n    super(cookiesOptions);\n  }\n\n  protected cookiesReader(): { [key: string]: any } {\n    let lastCookies = {};\n    let lastCookieString = '';\n    let cookiesArray: string[], cookie: string, i: number, index: number, name: string;\n    let currentCookieString = this.cookieString;\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookiesArray = lastCookieString.split('; ');\n      lastCookies = {};\n      for (i = 0; i < cookiesArray.length; i++) {\n        cookie = cookiesArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) {  // ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          if (isBlank((<any>lastCookies)[name])) {\n            (<any>lastCookies)[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  }\n\n  protected cookiesWriter(): (name: string, value: string | undefined, options?: CookiesOptions) => void {\n    return (name: string, value: string | undefined, options?: CookiesOptions) => {\n      this.cookieString = this.buildCookieString(name, value, options);\n    };\n  }\n\n  private buildCookieString(name: string, value: string | undefined, options?: CookiesOptions): string {\n    let opts: CookiesOptions = mergeOptions(this.options, options);\n    let expires: any = opts.expires;\n    if (isBlank(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (isString(expires)) {\n      expires = new Date(expires);\n    }\n    let str = encodeURIComponent(name) + '=' + encodeURIComponent((value as string));\n    str += opts.path ? ';path=' + opts.path : '';\n    str += opts.domain ? ';domain=' + opts.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += opts.secure ? ';secure' : '';\n    let cookiesLength = str.length + 1;\n    if (cookiesLength > 4096) {\n      console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too\n      large (${cookiesLength} > 4096 bytes)!`);\n    }\n    return str;\n  }\n}\n"]}