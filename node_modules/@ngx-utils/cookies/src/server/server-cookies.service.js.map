{"version":3,"file":"server-cookies.service.js","sourceRoot":"","sources":["../../../src/server/server-cookies.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAEnD,OAAO,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;;IAGR,wCAAc;IAGtD,8BACE,cAAqC,EACV,SACC;QAH9B,YAKE,kBAAM,cAAc,CAAC,SACtB;QAJ4B,aAAO,GAAP,OAAO;QACN,cAAQ,GAAR,QAAQ;2BALuB,EAAE;;KAQ9D;IAES,4CAAa,GAAvB;QACE,IAAM,UAAU,gBACX,IAAI,CAAC,OAAO,CAAC,OAAO,EACpB,IAAI,CAAC,UAAU,CACnB,CAAC;QACF,IAAM,OAAO,GAA2B,EAAE,CAAC;QAC3C,GAAG,CAAC,CAAC,IAAM,MAAI,IAAI,UAAU,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,OAAO,UAAU,CAAC,MAAI,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;gBAC5C,OAAO,CAAC,MAAI,CAAC,GAAG,kBAAkB,CAAC,UAAU,CAAC,MAAI,CAAC,CAAC,CAAC;aACtD;SACF;QACD,MAAM,CAAC,OAAO,CAAC;KAChB;IAES,4CAAa,GAAvB;QAAA,iBAaC;QARC,MAAM,CAAC,UACL,IAAY,EACZ,KAAyB,EACzB,OAAwB;YAExB,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;YAC9B,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;SACtE,CAAC;KACH;IAEO,kDAAmB,GAA3B,UAA4B,OAAwB;QAClD,IAAI,IAAI,GAAmB,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC/D,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvC;QACD,MAAM,CAAC,IAAI,CAAC;KACb;;gBA/CF,UAAU;;;;gBAJF,qBAAqB;gDAUzB,MAAM,SAAC,SAAS;gDAChB,MAAM,SAAC,UAAU;;+BAbtB;EAO0C,cAAc;SAA3C,oBAAoB","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { CookiesOptions } from '../cookies-options';\nimport { CookiesOptionsService } from '../cookies-options.service';\nimport { CookiesService } from '../cookies.service';\nimport { isString, mergeOptions } from '../utils';\n\n@Injectable()\nexport class ServerCookiesService extends CookiesService {\n  private newCookies: { [name: string]: string | undefined } = {};\n\n  constructor(\n    cookiesOptions: CookiesOptionsService,\n    @Inject('REQUEST') private request: any,\n    @Inject('RESPONSE') private response: any\n  ) {\n    super(cookiesOptions);\n  }\n\n  protected cookiesReader(): { [key: string]: any } {\n    const allCookies: { [key: string]: any } = {\n      ...this.request.cookies,\n      ...this.newCookies\n    };\n    const cookies: { [key: string]: any } = {};\n    for (const name in allCookies) {\n      if (typeof allCookies[name] !== 'undefined') {\n        cookies[name] = decodeURIComponent(allCookies[name]);\n      }\n    }\n    return cookies;\n  }\n\n  protected cookiesWriter(): (\n    name: string,\n    value: string | undefined,\n    options?: CookiesOptions\n  ) => void {\n    return (\n      name: string,\n      value: string | undefined,\n      options?: CookiesOptions\n    ) => {\n      this.newCookies[name] = value;\n      this.response.cookie(name, value, this.buildCookiesOptions(options));\n    };\n  }\n\n  private buildCookiesOptions(options?: CookiesOptions): CookiesOptions {\n    let opts: CookiesOptions = mergeOptions(this.options, options);\n    if (isString(opts.expires)) {\n      opts.expires = new Date(opts.expires);\n    }\n    return opts;\n  }\n}\n"]}