import { EventEmitter, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from "@angular/core";
import { NgxPermissionsService } from "../service/permissions.service";
import { NgxRolesService } from '../service/roles.service';
import 'rxjs/add/operator/merge';
import 'rxjs/add/operator/skip';
export declare class NgxPermissionsDirective implements OnInit, OnDestroy {
    private permissionsService;
    private rolesService;
    private viewContainer;
    private templateRef;
    ngxPermissionsOnly: string | string[];
    ngxPermissionsOnlyThen: TemplateRef<any>;
    ngxPermissionsOnlyElse: TemplateRef<any>;
    ngxPermissionsExcept: string | string[];
    ngxPermissionsExceptElse: TemplateRef<any>;
    ngxPermissionsExceptThen: TemplateRef<any>;
    ngxPermissionsThen: TemplateRef<any>;
    ngxPermissionsElse: TemplateRef<any>;
    permissionsAuthorized: EventEmitter<{}>;
    permissionsUnauthorized: EventEmitter<{}>;
    private initPermissionSubscription;
    private firstMergeUnusedRun;
    private currentAuthorizedState;
    constructor(permissionsService: NgxPermissionsService, rolesService: NgxRolesService, viewContainer: ViewContainerRef, templateRef: TemplateRef<any>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private validateExceptOnlyPermissions();
    private validateExceptAndOnlyPermissions();
    private validateOnlyPermissions();
    private handleUnauthorisedPermission(template);
    private handleAuthorisedPermission(template);
    private showTemplateBlockInView(template);
    private getAuthorisedTemplates();
}
